"""
    Copyright 2015 Impera

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: bart@impera.io
"""

entity Server extends web::ApplicationContainer:
    """
        An apache server
    """
end

implementation apacheServerRPM for Server:
    pkg = std::Package(host=host, name="httpd", state="installed")
    svc = std::Service(host=host, name="httpd", state="running", onboot=true, reload=true)
    svc.requires = [pkg, syscfg_file]
    svc.requires = self.requires

    syscfg_file = std::ConfigFile(host=host, path="/etc/sysconfig/httpd",
    content = std::template("apache/sysconfig.tmpl"))
    syscfg_file.requires = [pkg]

    # put an empty index.html in the default documentroot so health checks do not fail
    index_html = std::ConfigFile(host=host, path="/var/www/html/index.html", content="",
                                 requires=pkg)

    self.user = "apache"
    self.group = "apache"
end

implementation apacheServerDEB for Server:
    pkg = std::Package(host=host, name="apache2-mpm-worker", state="installed")
    pkg2 = std::Package(host=host, name="apache2", state="installed")
    svc = std::Service(host=host, name="apache2", state="running", onboot=true, reload=true)
    svc.requires = [pkg, pkg2]
    svc.requires = self.requires

    # put an empty index.html in the default documentroot so health checks do not fail
    index_html = std::ConfigFile(host=host, path="/var/www/html/index.html", content="",
                                 requires=pkg)

    self.user = "www-data"
    self.group = "www-data"
end

implementation serverLogs for Server:
    logging::LogFile(host=host, path="/var/log/httpd/access_log", type="apache", tag="access")
    logging::LogFile(host=host, path="/var/log/httpd/error_log", type="apache", tag="error")
end

implementation appImplRPM for web::Application:
    vhost_cfg = std::ConfigFile(host=container.host, path="/etc/httpd/conf.d/{{ name.hostname }}.conf",
                                content=std::template("apache/vhost.tmpl"),
                                requires = std::Package[host=container.host, name="httpd"],
                                provides = std::Service[host=container.host, name="httpd"])
end

implementation appImplDEB for web::Application:
    vhost_cfg = std::ConfigFile(host=container.host, content=std::template("apache/vhost.tmpl"),
                                path="/etc/apache2/sites-available/{{ name.hostname }}.conf",
                                requires=std::Package[host=container.host, name="apache2"],
                                provides=std::Service[host=container.host, name="apache2"],
                                reload=true)
    ln = std::Symlink(host=container.host, requires=vhost_cfg, reload=true,
                      source="/etc/apache2/sites-available/{{ name.hostname }}.conf",
                      target="/etc/apache2/sites-enabled/{{ name.hostname }}.conf",
                      provides=std::Service[host=container.host, name="apache2"])
end

implement Server using apacheServerRPM, serverLogs when std::familyof(host.os, "rhel") or std::familyof(host.os, "fedora")
implement Server using apacheServerDEB, serverLogs when std::familyof(host.os, "ubuntu")

